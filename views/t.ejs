<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher's Dashboard</title>
    <link rel="stylesheet" href="t.css">
</head>
<body>
<div class="container">
    <h1>Teacher's Page</h1>
    <h2>Attendance Overview</h2>

    <!-- OTP Section -->
    <div>
        <label for="otp-input">Enter OTP:</label>
        <input type="text" id="otp-input" readonly />
        <button onclick="generateOTP()">Generate OTP</button>
    </div>

    <!-- Course Selection -->
    <label for="course-select">Select Course:</label>
    <select id="course-select">
        <option value="">Select a Course</option>
        <option value="bca">BCA</option>
        <option value="bcom">BCom</option>
        <option value="bsc">BSc</option>
        <option value="ba">BA</option>
    </select>

    <!-- Attendance Details Section -->
    <div id="attendance-box" class="attendance-box" style="display: none;">
        <h2>Attendance Details</h2>
        <table>
            <thead>
                <tr>
                    <th>Student Name</th>
                    <th>Batch</th>
                    <th>Attendance Status</th>
                </tr>
            </thead>
            <tbody id="attendance-table-body"></tbody>
        </table>
    </div>

    <!-- Submitted Assignments Section -->
     <!-- Submitted Assignments Section -->
     <div id="assignment-box" class="assignment-box">
        <h2>Assignments</h2>
        <% if (assignments && assignments.length > 0) { %>
            <ul>
                <% assignments.forEach(function(a) { %>
                    <li>
                        <strong><%= a.title %></strong>: <%= a.description %> 
                        (Deadline: <%= a.deadline.toISOString().split('T')[0] %>)
                    </li>
                <% }) %>
            </ul>
        <% } else { %>
            <p>No assignments available.</p>
        <% } %>
    </div>

    <!-- New Assignment Section -->
    <div id="new-assignment-box" class="new-assignment-box">
        <h2>Add New Assignment Question</h2>
        <form id="new-assignment-form">
            <label for="assignment-question">Assignment Question:</label><br>
            <textarea id="assignment-question" rows="4" cols="50" placeholder="Enter the new assignment question here..."></textarea><br><br>
            <label for="assignment-deadline">Deadline:</label><br>
            <input type="date" id="assignment-deadline"><br><br>
            <button type="button" onclick="addAssignment()">Add Assignment</button>
        </form>

        <ul>
            <% assignments.forEach(function(a) { %>
                <li><%= a.title %>: <%= a.description %></li>
            <% }) %>
        </ul>
        
    </div>

    <a href="/student">Go to Student Page</a>
</div>

<script>
    // Fetch assignments from the server dynamically
    function fetchAssignments(course) {
        fetch(`/get-assignments?course=${course}`)
            .then(response => response.json())
            .then(data => {
                const assignmentTableBody = document.getElementById('assignment-table-body');
                assignmentTableBody.innerHTML = '';  // Clear previous content
    
                data.assignments.forEach(assignment => {
                    const row = document.createElement('tr');
                    
                    // Create table cells (td)
                    const studentNameCell = document.createElement('td');
                    studentNameCell.textContent = assignment.studentName; // Safe insertion
                    
                    const assignmentNameCell = document.createElement('td');
                    assignmentNameCell.textContent = assignment.assignmentName; // Safe insertion
                    
                    const downloadCell = document.createElement('td');
                    const downloadLink = document.createElement('a');
                    downloadLink.href = `/students/files/${assignment.fileId}`;
                    downloadLink.download = true;
                    downloadLink.textContent = 'Download'; // Safe insertion
                    
                    downloadCell.appendChild(downloadLink);
    
                    // Append cells to row
                    row.appendChild(studentNameCell);
                    row.appendChild(assignmentNameCell);
                    row.appendChild(downloadCell);
    
                    // Append the row to the table body
                    assignmentTableBody.appendChild(row);
                });
    
                // Show the assignment box (if needed)
                document.getElementById('assignment-box').style.display = 'block';
            })
            .catch(error => {
                console.error('Error fetching assignments:', error);
                alert('Error fetching assignments.');
            });
    }
    
    // Fetch attendance data (for now, using static data)
    function fetchAttendance(course) {
        const attendanceTableBody = document.getElementById('attendance-table-body');
        attendanceTableBody.innerHTML = '';
        // Static example data, you can replace this with real data from the server
        const attendanceData = [
            { name: "John Doe", batch: "BCA1", status: "Present" },
            { name: "Jane Smith", batch: "BCA1", status: "Absent" },
            { name: "Alice Brown", batch: "BCA1", status: "Late" }
        ];

        attendanceData.forEach(student => {
            const row = `
                <tr>
                    <td>${student.name}</td>
                    <td>${student.batch}</td>
                    <td>${student.status}</td>
                </tr>
            `;
            attendanceTableBody.innerHTML += row;
        });

        document.getElementById('attendance-box').style.display = 'block';
    }

    // Handle course selection
    document.getElementById('course-select').addEventListener('change', function() {
        const selectedCourse = this.value;
        if (selectedCourse) {
            fetchAttendance(selectedCourse);
            fetchAssignments(selectedCourse);
        } else {
            document.getElementById('attendance-box').style.display = 'none';
            document.getElementById('assignment-box').style.display = 'none';
        }
    });

    // Function to generate OTP (temporary)
    function generateOTP() {
        const otp = Math.floor(Math.random() * 1000000); // Generate a random 6-digit number
        document.getElementById('otp-input').value = otp;
        alert('Your OTP is: ' + otp);
    }

    // Function to add a new assignment question
    function addAssignment() {
        const question = document.getElementById('assignment-question').value;
        const deadline = document.getElementById('assignment-deadline').value;

        if (question && deadline) {
            // Log the data being sent
            console.log('Adding Assignment:', { question, deadline });

            // Send assignment data to the server via POST
            fetch('/add-assignment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ question, deadline })
            })
            .then(response => {
                // Log the server response
                return response.json(); // This will parse the JSON response body
            })
            .then(data => {
                // Log the parsed response data
                console.log('Server response:', data);
                alert(data.message);  // Alert the message from server
                document.getElementById('new-assignment-form').reset(); // Reset the form
            })
            .catch(error => {
                console.error('Error adding assignment:', error);  // Log the error
                alert('Error adding assignment: ' + error);  // Show an alert
            });
        } else {
            alert('Please fill in both the assignment question and deadline.');
        }
    }
</script>

</body>
</html>
